# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'login.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow
from game import Game
from rules import Rules
from records import Record
from winner import Winner
from signup import SignUP
import sqlite3
import random


class Login(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(445, 436)
        MainWindow.setMinimumSize(QtCore.QSize(445, 436))
        MainWindow.setMaximumSize(QtCore.QSize(445, 436))
        MainWindow.setStyleSheet("background-color: rgb(255, 221, 119);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.P2_label_10 = QtWidgets.QLabel(self.centralwidget)
        self.P2_label_10.setGeometry(QtCore.QRect(260, 70, 31, 41))
        font = QtGui.QFont()
        font.setPointSize(32)
        font.setBold(True)
        font.setWeight(75)
        self.P2_label_10.setFont(font)
        self.P2_label_10.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.P2_label_10.setStyleSheet("color: rgb(255, 255, 0);")
        self.P2_label_10.setScaledContents(False)
        self.P2_label_10.setObjectName("P2_label_10")
        self.P2_label_7 = QtWidgets.QLabel(self.centralwidget)
        self.P2_label_7.setGeometry(QtCore.QRect(170, 70, 31, 41))
        font = QtGui.QFont()
        font.setPointSize(32)
        font.setBold(True)
        font.setWeight(75)
        self.P2_label_7.setFont(font)
        self.P2_label_7.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.P2_label_7.setStyleSheet("color: rgb(255, 255, 0);")
        self.P2_label_7.setScaledContents(False)
        self.P2_label_7.setObjectName("P2_label_7")
        self.P2_label_11 = QtWidgets.QLabel(self.centralwidget)
        self.P2_label_11.setGeometry(QtCore.QRect(290, 70, 31, 41))
        font = QtGui.QFont()
        font.setPointSize(32)
        font.setBold(True)
        font.setWeight(75)
        self.P2_label_11.setFont(font)
        self.P2_label_11.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.P2_label_11.setStyleSheet("color: rgb(255, 0, 0);")
        self.P2_label_11.setScaledContents(False)
        self.P2_label_11.setObjectName("P2_label_11")
        self.P2_label_9 = QtWidgets.QLabel(self.centralwidget)
        self.P2_label_9.setGeometry(QtCore.QRect(230, 70, 31, 41))
        font = QtGui.QFont()
        font.setPointSize(32)
        font.setBold(True)
        font.setWeight(75)
        self.P2_label_9.setFont(font)
        self.P2_label_9.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.P2_label_9.setStyleSheet("color: rgb(255, 152, 34);")
        self.P2_label_9.setScaledContents(False)
        self.P2_label_9.setObjectName("P2_label_9")
        self.P2_label_6 = QtWidgets.QLabel(self.centralwidget)
        self.P2_label_6.setGeometry(QtCore.QRect(140, 70, 31, 41))
        font = QtGui.QFont()
        font.setPointSize(32)
        font.setBold(True)
        font.setWeight(75)
        self.P2_label_6.setFont(font)
        self.P2_label_6.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.P2_label_6.setStyleSheet("color: rgb(255, 152, 34);")
        self.P2_label_6.setScaledContents(False)
        self.P2_label_6.setObjectName("P2_label_6")
        self.P2_label_8 = QtWidgets.QLabel(self.centralwidget)
        self.P2_label_8.setGeometry(QtCore.QRect(200, 70, 31, 41))
        font = QtGui.QFont()
        font.setPointSize(32)
        font.setBold(True)
        font.setWeight(75)
        self.P2_label_8.setFont(font)
        self.P2_label_8.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.P2_label_8.setStyleSheet("color: rgb(255, 0, 0);")
        self.P2_label_8.setScaledContents(False)
        self.P2_label_8.setObjectName("P2_label_8")
        self.player_label = QtWidgets.QLabel(self.centralwidget)
        self.player_label.setGeometry(QtCore.QRect(80, 170, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.player_label.setFont(font)
        self.player_label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.player_label.setStyleSheet("")
        self.player_label.setScaledContents(False)
        self.player_label.setObjectName("player_label")
        self.player_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.player_label_2.setGeometry(QtCore.QRect(80, 220, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.player_label_2.setFont(font)
        self.player_label_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.player_label_2.setStyleSheet("")
        self.player_label_2.setScaledContents(False)
        self.player_label_2.setObjectName("player_label_2")
        self.user_name = QtWidgets.QLineEdit(self.centralwidget)
        self.user_name.setGeometry(QtCore.QRect(220, 180, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.user_name.setFont(font)
        self.user_name.setStyleSheet("border-color: rgb(255, 255, 255);")
        self.user_name.setObjectName("user_name")
        self.user_pass = QtWidgets.QLineEdit(self.centralwidget)
        self.user_pass.setGeometry(QtCore.QRect(220, 230, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.user_pass.setFont(font)
        self.user_pass.setObjectName("user_pass")
        self.btn_login = QtWidgets.QPushButton(self.centralwidget)
        self.btn_login.setGeometry(QtCore.QRect(200, 280, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.btn_login.setFont(font)
        self.btn_login.setStyleSheet("background-color: rgb(255, 147, 23);")
        self.btn_login.setObjectName("btn_login")
        self.btn_signup = QtWidgets.QPushButton(self.centralwidget)
        self.btn_signup.setGeometry(QtCore.QRect(270, 340, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.btn_signup.setFont(font)
        self.btn_signup.setStyleSheet("background-color: rgb(255, 147, 23);")
        self.btn_signup.setObjectName("btn_signup")
        self.player_label_3 = QtWidgets.QLabel(self.centralwidget)
        self.player_label_3.setGeometry(QtCore.QRect(100, 340, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.player_label_3.setFont(font)
        self.player_label_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.player_label_3.setStyleSheet("")
        self.player_label_3.setScaledContents(False)
        self.player_label_3.setObjectName("player_label_3")
        self.lbl_error = QtWidgets.QLabel(self.centralwidget)
        self.lbl_error.setGeometry(QtCore.QRect(171, 130, 221, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.lbl_error.setFont(font)
        self.lbl_error.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lbl_error.setStyleSheet("")
        self.lbl_error.setText("")
        self.lbl_error.setScaledContents(False)
        self.lbl_error.setObjectName("lbl_error")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.btn_login.clicked.connect(self.Login)
        self.btn_signup.clicked.connect(self.SignUp)
        self.connection()

    def connection(self):
        self.conn = sqlite3.connect('gameRecords.db')
        self.conn.execute(
            "CREATE TABLE IF NOT EXISTS users (username	TEXT, password	TEXT NOT NULL, PRIMARY KEY(username))")
        self.conn.execute(
            "CREATE TABLE IF NOT EXISTS records (username TEXT, game_status INTEGER NOT NULL, score	INTEGER NOT NULL, opponent_score INTEGER NOT NULL)")

    def Login(self):
        username = self.user_name.text()
        userpass = self.user_pass.text()

        self.cur = self.conn.cursor()
        self.cur.execute(
            "SELECT * FROM users WHERE username = ? AND  password = ? ;", (username, userpass))
        result = self.cur.fetchone()
        self.cur.close()
        
        if username == "" or userpass == "":
            self.lbl_error.setText("Incomplete Data!")
        elif result == None:
            self.lbl_error.setText("Account not found!")
        elif username == result[0] and userpass == result[1]:
            self.username = result[0]
            username = self.user_name.setText("")
            userpass = self.user_pass.setText("")
            userpass = self.lbl_error.setText("")
            self.game = QtWidgets.QMainWindow()
            self.game_ui = Game()
            self.game_ui.setupUi(self.game)
            self.game_ui.P2_label_2.setText(self.username)
            self.game_ui.P2_label_2.setAlignment(QtCore.Qt.AlignCenter)
            MainWindow.hide()
            self.game.show()

            self.game_ui.btn_logout.clicked.connect(self.LogOut)
            self.game_ui.btn_records.clicked.connect(self.record)
            self.game_ui.btn_rules.clicked.connect(self.Rules)

            self.p1_tokens = {'protected': [[], []], 'unprotected': [
                    [1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]]}
            self.p2_tokens = {'protected': [[], []], 'unprotected': [
                [1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]]}

            self.is_player_1 = True
            self.is_First_turn = True
            self.count = 0
            self.dice_val = []
            self.p1_caught = []
            self.p2_caught = []
            self.p1Score = 0
            self.p2Score = 0

            self.game_ui.btn_roll.clicked.connect(self.generate_dices)

            self.game_ui.p1P1.clicked.connect(self.btn_clicked)
            self.game_ui.p1P2.clicked.connect(self.btn_clicked)
            self.game_ui.p1P3.clicked.connect(self.btn_clicked)
            self.game_ui.p1P4.clicked.connect(self.btn_clicked)
            self.game_ui.p1P5.clicked.connect(self.btn_clicked)
            self.game_ui.p1P6.clicked.connect(self.btn_clicked)

            self.game_ui.p1S1.clicked.connect(self.btn_clicked)
            self.game_ui.p1S2.clicked.connect(self.btn_clicked)
            self.game_ui.p1S3.clicked.connect(self.btn_clicked)
            self.game_ui.p1S4.clicked.connect(self.btn_clicked)
            self.game_ui.p1S5.clicked.connect(self.btn_clicked)
            self.game_ui.p1S6.clicked.connect(self.btn_clicked)

            self.game_ui.p2P1.clicked.connect(self.btn_clicked)
            self.game_ui.p2P2.clicked.connect(self.btn_clicked)
            self.game_ui.p2P3.clicked.connect(self.btn_clicked)
            self.game_ui.p2P4.clicked.connect(self.btn_clicked)
            self.game_ui.p2P5.clicked.connect(self.btn_clicked)
            self.game_ui.p2P6.clicked.connect(self.btn_clicked)

            self.game_ui.p2S1.clicked.connect(self.btn_clicked)
            self.game_ui.p2S2.clicked.connect(self.btn_clicked)
            self.game_ui.p2S3.clicked.connect(self.btn_clicked)
            self.game_ui.p2S4.clicked.connect(self.btn_clicked)
            self.game_ui.p2S5.clicked.connect(self.btn_clicked)
            self.game_ui.p2S6.clicked.connect(self.btn_clicked)

    def check_dice_vals(self):
        if not(self.is_First_turn):
            if len(self.dice_val) == 0:
                return True
            for i in self.dice_val:
                if self.is_player_1:
                    if i in self.p1_tokens['unprotected'][0] or i in self.p1_tokens['unprotected'][1] or i in self.p2_tokens['unprotected'][0] or i in self.p2_tokens['unprotected'][1] or i in self.p2_tokens['protected'][0] or i in self.p2_tokens['protected'][1]:
                        return True
                else:
                    if i in self.p2_tokens['unprotected'][0] or i in self.p2_tokens['unprotected'][1] or i in self.p1_tokens['unprotected'][0] or i in self.p1_tokens['unprotected'][1] or i in self.p1_tokens['protected'][0] or i in self.p1_tokens['protected'][1]:
                        return True
            return False
        else:
            if len(self.dice_val) == 0:
                return True
            for i in self.dice_val:
                if self.is_player_1:
                    if i in self.p1_tokens['unprotected'][1]:
                        return True
                else:
                    if i in self.p2_tokens['unprotected'][1]:
                        return True
            return False

    def generate_dices(self):
        if len(self.dice_val) == 0:
            self.dice_val = [random.randint(1, 6) for i in range(3)]
            # self.dice_val = [3,3,3]
            self.game_ui.dice_values.setText(
                str(self.dice_val[0])+"   "+str(self.dice_val[1])+"   "+str(self.dice_val[2]))
            if self.check_dice_vals() == False:
                self.game_ui.dice_values.setText("No valid values")
                self.dice_val = []
                self.swap_player()

    def swap_player(self):
        if self.is_player_1:
            self.is_player_1 = False
            self.game_ui.player_label.setText("  Opponent's Turn")
        elif not(self.is_player_1):
            self.is_player_1 = True
            self.game_ui.player_label.setText("     Your Turn")

    def first_check_btn(self, btn_name):
        vals = ""
        if btn_name[1] == '1' and self.is_player_1:
            if btn_name[2] == 'S':
                if int(btn_name[3]) in self.p1_tokens['unprotected'][1]:
                    if int(btn_name[3]) in self.dice_val:
                        self.dice_val.remove(int(btn_name[3]))
                        for i in self.dice_val:
                            vals = vals + str(i) + "   "
                        self.game_ui.dice_values.setText(vals)
                        self.p1_tokens['unprotected'][1].remove(
                            int(btn_name[3]))
                        self.p1_tokens['protected'][1].append(int(btn_name[3]))
                        self.sending_button.setStyleSheet(
                            "background-color : yellow")
                        self.count += 1
                        if len(self.dice_val) == 0:
                            self.swap_player()

        if btn_name[1] == '2' and not(self.is_player_1):
            if btn_name[2] == 'S':
                if int(btn_name[3]) in self.p2_tokens['unprotected'][1]:
                    if int(btn_name[3]) in self.dice_val:
                        self.dice_val.remove(int(btn_name[3]))
                        for i in self.dice_val:
                            vals = vals + str(i) + "   "
                        self.game_ui.dice_values.setText(vals)
                        self.p2_tokens['unprotected'][1].remove(
                            int(btn_name[3]))
                        self.p2_tokens['protected'][1].append(int(btn_name[3]))
                        self.sending_button.setStyleSheet(
                            "background-color : yellow")
                        self.count += 1
                        if len(self.dice_val) == 0:
                            self.swap_player()

        if self.check_dice_vals() == False:
            self.count += len(self.dice_val)
            self.swap_player()
            self.dice_val = []
            self.game_ui.dice_values.setText("")

    def second_check_btn(self, btn_name):
        vals = ""
        if btn_name[1] == '1' and self.is_player_1:
            if btn_name[2] == 'S':
                if int(btn_name[3]) in self.p1_tokens['unprotected'][1]:
                    if int(btn_name[3]) in self.dice_val:
                        self.dice_val.remove(int(btn_name[3]))
                        for i in self.dice_val:
                            vals = vals + str(i) + "   "
                        self.game_ui.dice_values.setText(vals)
                        self.p1_tokens['unprotected'][1].remove(
                            int(btn_name[3]))
                        self.p1_tokens['protected'][1].append(int(btn_name[3]))
                        self.sending_button.setStyleSheet(
                            "background-color : yellow")
                        self.count += 1
                        if len(self.dice_val) == 0:
                            self.swap_player()
            if btn_name[2] == 'P':
                if int(btn_name[3]) in self.p1_tokens['unprotected'][0]:
                    if int(btn_name[3]) in self.dice_val:
                        self.dice_val.remove(int(btn_name[3]))
                        for i in self.dice_val:
                            vals = vals + str(i) + "   "
                        self.game_ui.dice_values.setText(vals)
                        self.p1_tokens['unprotected'][0].remove(
                            int(btn_name[3]))
                        self.p1_tokens['protected'][0].append(int(btn_name[3]))
                        self.sending_button.setStyleSheet(
                            "background-color : yellow")
                        self.count += 1
                        if len(self.dice_val) == 0:
                            self.swap_player()

        if btn_name[1] == '2' and self.is_player_1:
            if btn_name[2] == 'P':
                if int(btn_name[3]) in self.dice_val:
                    self.dice_val.remove(int(btn_name[3]))
                    for i in self.dice_val:
                        vals = vals + str(i) + "   "
                    self.game_ui.dice_values.setText(vals)
                    if int(btn_name[3]) in self.p2_tokens['protected'][0]:
                        self.sending_button.setStyleSheet(
                            "background-color: rgb(255, 147, 23)")
                        self.p2_tokens['protected'][0].remove(int(btn_name[3]))
                        self.p2_tokens['unprotected'][0].append(
                            int(btn_name[3]))
                    elif int(btn_name[3]) in self.p2_tokens['unprotected'][0]:
                        self.p1_caught.append(int(btn_name[3]))
                        self.p2_tokens['unprotected'][0].remove(
                            int(btn_name[3]))
                        self.sending_button.setStyleSheet(
                            "background-color: rgb(255, 11, 15)")
                    self.count += 1
                    if len(self.dice_val) == 0:
                        self.swap_player()
            if btn_name[2] == 'S':
                if int(btn_name[3]) in self.dice_val:
                    self.dice_val.remove(int(btn_name[3]))
                    for i in self.dice_val:
                        vals = vals + str(i) + "   "
                    self.game_ui.dice_values.setText(vals)
                    if int(btn_name[3]) in self.p2_tokens['protected'][1]:
                        self.sending_button.setStyleSheet(
                            "background-color: rgb(255, 147, 23)")
                        self.p2_tokens['protected'][1].remove(int(btn_name[3]))
                        self.p2_tokens['unprotected'][1].append(
                            int(btn_name[3]))
                    elif int(btn_name[3]) in self.p2_tokens['unprotected'][1]:
                        self.p1_caught.append(int(btn_name[3]))
                        self.p2_tokens['unprotected'][1].remove(
                            int(btn_name[3]))
                        self.sending_button.setStyleSheet(
                            "background-color: rgb(255, 11, 15)")
                    self.count += 1
                    if len(self.dice_val) == 0:
                        self.swap_player()

        if btn_name[1] == '2' and not(self.is_player_1):
            if btn_name[2] == 'S':
                if int(btn_name[3]) in self.p2_tokens['unprotected'][1]:
                    if int(btn_name[3]) in self.dice_val:
                        self.dice_val.remove(int(btn_name[3]))
                        for i in self.dice_val:
                            vals = vals + str(i) + "   "
                        self.game_ui.dice_values.setText(vals)
                        self.p2_tokens['unprotected'][1].remove(
                            int(btn_name[3]))
                        self.p2_tokens['protected'][1].append(int(btn_name[3]))
                        self.sending_button.setStyleSheet(
                            "background-color : yellow")
                        self.count += 1
                        if len(self.dice_val) == 0:
                            self.swap_player()
            if btn_name[2] == 'P':
                if int(btn_name[3]) in self.p2_tokens['unprotected'][0]:
                    if int(btn_name[3]) in self.dice_val:
                        self.dice_val.remove(int(btn_name[3]))
                        for i in self.dice_val:
                            vals = vals + str(i) + "   "
                        self.game_ui.dice_values.setText(vals)
                        self.p2_tokens['unprotected'][0].remove(
                            int(btn_name[3]))
                        self.p2_tokens['protected'][0].append(int(btn_name[3]))
                        self.sending_button.setStyleSheet(
                            "background-color : yellow")
                        self.count += 1
                        if len(self.dice_val) == 0:
                            self.swap_player()

        if btn_name[1] == '1' and not(self.is_player_1):
            if btn_name[2] == 'P':
                if int(btn_name[3]) in self.dice_val:
                    self.dice_val.remove(int(btn_name[3]))
                    for i in self.dice_val:
                        vals = vals + str(i) + "   "
                    self.game_ui.dice_values.setText(vals)
                    if int(btn_name[3]) in self.p1_tokens['protected'][0]:
                        self.sending_button.setStyleSheet(
                            "background-color: rgb(255, 147, 23)")
                        self.p1_tokens['protected'][0].remove(int(btn_name[3]))
                        self.p1_tokens['unprotected'][0].append(
                            int(btn_name[3]))
                    elif int(btn_name[3]) in self.p1_tokens['unprotected'][0]:
                        self.p2_caught.append(int(btn_name[3]))
                        self.p1_tokens['unprotected'][0].remove(
                            int(btn_name[3]))
                        self.sending_button.setStyleSheet(
                            "background-color: rgb(255, 11, 15)")
                    self.count += 1
                    if len(self.dice_val) == 0:
                        self.swap_player()

            if btn_name[2] == 'S':
                if int(btn_name[3]) in self.dice_val:
                    self.dice_val.remove(int(btn_name[3]))
                    for i in self.dice_val:
                        vals = vals + str(i) + "   "
                    self.game_ui.dice_values.setText(vals)
                    if int(btn_name[3]) in self.p1_tokens['protected'][1]:
                        self.sending_button.setStyleSheet(
                            "background-color: rgb(255, 147, 23)")
                        self.p1_tokens['protected'][1].remove(int(btn_name[3]))
                        self.p1_tokens['unprotected'][1].append(
                            int(btn_name[3]))
                    elif int(btn_name[3]) in self.p1_tokens['unprotected'][1]:
                        self.p2_caught.append(int(btn_name[3]))
                        self.p1_tokens['unprotected'][1].remove(
                            int(btn_name[3]))
                        self.sending_button.setStyleSheet(
                            "background-color: rgb(255, 11, 15)")
                    self.count += 1
                    if len(self.dice_val) == 0:
                        self.swap_player()

        if self.check_dice_vals() == False:
            self.count += len(self.dice_val)
            self.swap_player()
            self.dice_val = []
            self.game_ui.dice_values.setText("")

    def btn_clicked(self):
        self.sending_button = MainWindow.sender()
        self.sending_button_name = self.sending_button.objectName()
        if self.is_First_turn:
            if self.count < 6:
                self.first_check_btn(self.sending_button_name)
            else:
                self.is_First_turn = False
        else:
            self.second_check_btn(self.sending_button_name)
            if len(self.p1_tokens['protected'][0]) + len(self.p1_tokens['unprotected'][0]) == 0:
                self.p1Score = sum(
                    self.p2_caught) + sum(self.p2_tokens['protected'][0]) + sum(self.p2_tokens['protected'][1])
                self.p2Score = sum(
                    self.p1_caught) + sum(self.p1_tokens['protected'][0]) + sum(self.p1_tokens['protected'][1])
                self.winner()
            if len(self.p2_tokens['protected'][0]) + len(self.p2_tokens['unprotected'][0]) == 0:
                self.p1Score = sum(
                    self.p2_caught) + sum(self.p2_tokens['protected'][0]) + sum(self.p2_tokens['protected'][1])
                self.p2Score = sum(
                    self.p1_caught) + sum(self.p1_tokens['protected'][0]) + sum(self.p1_tokens['protected'][1])
                self.winner()

    def reset(self):
        self.p1_tokens = {'protected': [[], []], 'unprotected': [
            [1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]]}
        self.p2_tokens = {'protected': [[], []], 'unprotected': [
            [1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]]}

        self.is_player_1 = True
        self.is_First_turn = True
        self.count = 0
        self.dice_val = []
        self.p1_caught = []
        self.p2_caught = []
        self.p1Score = 0
        self.p2Score = 0
        self.dice_values.setText("")
        self.player_label.setText("  Player 1's Turn")

        self.gam.p1P1.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p1P2.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p1P3.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p1P4.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p1P6.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p1P5.setStyleSheet("background-color: rgb(255, 147, 23)")

        self.game_ui.p1S1.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p1S2.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p1S3.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p1S4.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p1S5.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p1S6.setStyleSheet("background-color: rgb(255, 147, 23)")

        self.game_ui.p2P1.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p2P2.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p2P3.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p2P4.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p2P5.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p2P6.setStyleSheet("background-color: rgb(255, 147, 23)")

        self.game_ui.p2S1.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p2S2.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p2S3.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p2S4.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p2S5.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.game_ui.p2S6.setStyleSheet("background-color: rgb(255, 147, 23)")
        self.help.close()

    def winner(self):
        self.Winner = QMainWindow()
        self.Winner_ui = Winner()
        self.Winner_ui.setupUi(self.Winner)
        self.Winner.show()
        self.Winner_ui.p1_score.setText(" Your Score: "+str(self.p1Score))
        self.Winner_ui.p2_score.setText(" Opponent Score: "+str(self.p2Score))
        self.win = 0
        if self.p1Score > self.p2Score:
            self.Winner_ui.win_label.setText("     You WON!!!")
            self.win = 1
        elif self.p1Score < self.p2Score:
            self.Winner_ui.win_label.setText("     Opponent WON!!!")
            self.win = 2
        else:
            self.Winner_ui.win_label.setText("     Game Draw!!!!!!")
        
        self.cur = self.conn.cursor()
        self.cur.execute(
            "INSERT into records (username, game_status , score, opponent_score) VALUES (?,?,?,?)",(self.username, self.win, self.p1Score, self.p2Score))
        self.cur.close()
        self.conn.commit()

        self.Winner_ui.btn_ok.clicked.connect(self.reset)

    def Rules(self):
        self.rules = QtWidgets.QMainWindow()
        self.rules_ui = Rules()
        self.rules_ui.setupUi(self.rules)
        self.rules.show()

    def record(self):
        self.records = QtWidgets.QMainWindow()
        self.records_ui = Record()
        self.records_ui.setupUi(self.records)

        self.cur = self.conn.cursor()
        self.cur.execute("SELECT COUNT(*), MAX(score) AS WON FROM records WHERE username = ?",(self.username,))
        res = self.cur.fetchone()

        if res is None:
            self.records_ui.total_games.setText("0")
            self.records_ui.games_won.setText("0")
            self.records_ui.games_lost.setText("0")
            self.records_ui.games_draw.setText("0")
            self.records_ui.high_score.setText("0")
        else:
            self.cur.execute(
                "SELECT Draw, Won, Lost FROM (SELECT COUNT(*) AS Draw FROM records WHERE username = ? and game_status = 0), (SELECT COUNT(*) AS Won FROM records WHERE username = ? and game_status = 1), (SELECT COUNT(*) AS Lost FROM records WHERE username = ? and game_status = 2)", (self.username, self.username,self.username))
            result = self.cur.fetchone()
            self.records_ui.user_name.setText(self.username)
            self.records_ui.total_games.setText(str(res[0]))
            self.records_ui.high_score.setText(str(res[1]))
            self.records_ui.games_won.setText(str(result[1]))
            self.records_ui.games_lost.setText(str(result[2]))
            self.records_ui.games_draw.setText(str(result[0]))
        
        self.records.show()

    def LogOut(self):
        MainWindow.show()
        self.game.close()

    def SignUp(self):
        self.Signup = QtWidgets.QMainWindow()
        self.Signup_ui = SignUP()
        self.Signup_ui.setupUi(self.Signup)
        username = self.user_name.setText("")
        userpass = self.user_pass.setText("")
        userpass = self.lbl_error.setText("")
        self.Signup.show()

        self.Signup_ui.btn_create_account.clicked.connect(self.create)

    def create(self):
        username = self.Signup_ui.user_name.text()
        userpass = self.Signup_ui.user_pass.text()
        self.cur = self.conn.cursor()
        try:
            self.cur.execute("INSERT INTO users (username, password) VALUES (?,?)",(username, userpass))
            self.Signup_ui.lbl_error.setText("Account Creation Successfull!")
            self.conn.commit()
        except:
            self.Signup_ui.lbl_error.setText("Username already exists!!!")
        finally:
            self.cur.close()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "PERUKE"))
        self.P2_label_10.setText(_translate("MainWindow", "K"))
        self.P2_label_7.setText(_translate("MainWindow", "E"))
        self.P2_label_11.setText(_translate("MainWindow", "E"))
        self.P2_label_9.setText(_translate("MainWindow", "U"))
        self.P2_label_6.setText(_translate("MainWindow", "P"))
        self.P2_label_8.setText(_translate("MainWindow", "R"))
        self.player_label.setText(_translate("MainWindow", "User name"))
        self.player_label_2.setText(_translate("MainWindow", "Password"))
        self.btn_login.setText(_translate("MainWindow", "Login"))
        self.btn_signup.setText(_translate("MainWindow", "SignUp"))
        self.player_label_3.setText(_translate(
            "MainWindow", "Don\'t have account?"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Login()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
